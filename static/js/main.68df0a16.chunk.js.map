{"version":3,"sources":["dynamic_content.js","Landing.js","App.js","serviceWorker.js","index.js"],"names":["techno_options","key","name","image_url","Landing","_useState","useState","_useState2","Object","slicedToArray","setTechnoDetail","react_default","a","createElement","MainContainer","Header","HeaderContent","Citation","href","target","HeaderIcon","src","Content","Part","grey","Title","FlexContainer","map","option","Icon","onClick","style","marginTop","Item","styled","div","_templateObject","_templateObject2","_templateObject3","p","_templateObject4","_templateObject5","_templateObject6","props","h2","_templateObject7","_templateObject8","img","_templateObject9","_templateObject10","_templateObject11","_templateObject12","App","src_Landing","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68df0a16.chunk.js","sourcesContent":["export const techno_options = [\n    {key: 'apollo', name: 'apollo', image_url: 'https://jimmy4701.github.io/me/images/apollo.png'},\n    {key: 'graphql', name: 'graphql', image_url: 'https://jimmy4701.github.io/me/images/graphql.png'},\n    {key: 'javascript', name: 'javascript', image_url: 'https://jimmy4701.github.io/me/images/javascript.png'},\n    {key: 'meteor-js', name: 'meteor-js', image_url: 'https://jimmy4701.github.io/me/images/meteor-js.png'},\n    {key: 'mongodb', name: 'mongodb', image_url: 'https://jimmy4701.github.io/me/images/mongodb.jpg'},\n    {key: 'react', name: 'react', image_url: 'https://jimmy4701.github.io/me/images/react.png'},\n]\n\nexport const techno_content = {\n    'apollo': `\n        <h1>Apollo</h1>\n        <p>Premier système d'intégration de GraphQL dans les stacks Javascript. Ce framework permet de centraliser et partager les données de vos systèmes\n        via une interface réseau commune.<br/><br/>Un gain en simplicité et en rapidité qui n'a pas encore son égal sur le marché</p>\n    `,\n    'graphql': `\n        <h1>Graph QL</h1>\n        <p>Tout simplement le système de gestion des données utilisé et propulsé par Facebook.<br/><br/>Vous avez une API mais sa documentation est un\n        enfer à comprendre ? Vos données sont devenues trop complèxes pour que cela soit plaisant à utiliser ?<br/><br/>GraphQL vient simplifier tout ça\n        en centraliser les données, et en intégrant une logique data dans votre système d'information.</p>\n    `,\n    'javascript': `\n        <h1>Javascript</h1>\n        <p>Langage de développement Fullstack, qui permet d'intervenir à la fois sur le côté client et serveur d'une application web.<br/><br/>\n        Et pour rester totalement objectif, tellement meilleur que PHP ;)\n        </p>\n    `,\n    'meteor-js': `\n        <h1>Meteor JS</h1>\n        <p>Un framewor\n        </p>\n    `,\n    'mongodb': ``,\n    'react': ``\n}","import React, {useState}                    from 'react'\nimport styled                               from 'styled-components'\nimport { techno_options, techno_content }   from './dynamic_content'\n\nconst Landing = () => {\n    const [techno_detail, setTechnoDetail] = useState()\n\n    return (\n        <MainContainer>\n            <Header>\n                <HeaderContent>\n                    <Citation>\"A coeur vaillant, rien d'impossible\"</Citation>\n                    <h1>JÉRÉMY SIMONKLEIN ANGÉLY</h1>\n                    <h3>Ingénieur web</h3>\n                    <a href=\"//www.linkedin.com/in/j%C3%A9r%C3%A9my-simonklein-angely/\" target=\"_blank\">\n                        <HeaderIcon src=\"https://jimmy4701.github.io/me/images/linkedin.jpg\"/>\n                    </a>\n                </HeaderContent>\n            </Header>\n            <Content>\n                <Part grey>\n                    <Title>Ingénieur web fullstack</Title>\n                    <p>Avec plus de 10 ans d'expérience dans le web, j'interviens sur l'intégralité de la stack des projets qui me sont confiés.\n                        <br/>Audit, conception, développement, analyse, management... Aucune partie ne m'échappe.\n                    </p>\n                </Part>\n                <Part>\n                    <Title>Le meilleur de la techno web du moment...</Title>\n                    <FlexContainer>\n                        {techno_options.map(option => (\n                            <Icon src={option.image_url} onClick={() => setTechnoDetail(option.key)} />\n                        ))}\n                    </FlexContainer>\n                    {/* {techno_detail &&\n                        <TechnoDetail>\n                            <div dangerouslySetInnerHTML={{__html: techno_content[techno_detail]}} />\n                        </TechnoDetail>\n                    } */}\n                    <Title style={{marginTop: \"2em\"}}>... allié aux meilleures méthodes de gestion de projet</Title>\n                    <FlexContainer>\n                        <Item>\n                            <img src=\"https://jimmy4701.github.io/me/images/scrum.svg\"/>\n                            <p>Audit / Conception</p>\n                        </Item>\n                        <Item>\n                            <a href=\"https://fr.wikipedia.org/wiki/Scrum_(d%C3%A9veloppement)\" target=\"_blank\">\n                                <img src=\"https://jimmy4701.github.io/me/images/iteration.svg\"/>\n                                <p>SCRUM</p>\n                            </a>\n                        </Item>\n                        <Item>\n                            <img src=\"https://jimmy4701.github.io/me/images/challenges.svg\"/>\n                            <p>Génie Logiciel</p>\n                        </Item>\n                        <Item>\n                            <img src=\"https://jimmy4701.github.io/me/images/team.svg\"/>\n                            <p>Rétro-Formation</p>\n                        </Item>\n                    </FlexContainer>\n                </Part>\n                <Part grey>\n                    <Title>Formations</Title>\n                </Part>\n                <Part>\n                    <Title>Vie associative</Title>\n                </Part>\n                <Part grey>\n                    <Title>Serial-Entrepreneur</Title>\n                </Part>\n            </Content>\n        </MainContainer>\n    )\n}\n\nexport default Landing\n\nconst MainContainer = styled.div`\n`\n\nconst Header = styled.div`\n    min-height: 100vh;\n    width: 100%;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:before {\n        content: \"\";\n        background-image: url('https://jimmy4701.github.io/me/images/background_landing.jpg');\n        background-size: cover;\n        background-position: center;\n        filter: grayscale(1) brightness(0.3);\n        height: 100%;\n        width: 100%;\n        position: absolute;\n    }\n`\n\nconst HeaderContent = styled.div`\n    color: white;\n    filter: grayscale(0) brightness(1);\n    text-align: center;\n\n    h1, h3 {\n        margin: 0;\n    }\n\n    h1 {\n        font-size: 4em;\n    }\n\n    h3 {\n        font-size: 2em;\n    }\n`\n\nconst Citation = styled.p`\n    font-style: italic;\n    font-size: 1.2em;\n`\n\nconst Content = styled.div``\n\nconst Part = styled.div`\n    background-color: ${props => props.grey ? \"#eaeaea\" : \"white\"};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    padding: 4em 0;\n\n    p {\n        font-size: 1.3em;\n        font-family: 'DM Sans', Arial ;\n    }\n`\n\nconst Title = styled.h2`\n    font-size: 2.5em;\n    margin: 0 0 1em 0;\n`\n\nconst FlexContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    width: 80%;\n    margin-bottom: 3em;\n    flex-wrap: wrap;\n`\n\nconst Icon = styled.img`\n    max-width: 10em;\n    filter: grayscale(1);\n    margin: 1em;\n    \n    &:hover {\n        transition: all 0.4s;\n        filter: grayscale(0);\n    }\n`\n\nconst TechnoDetail = styled.div`\n    width: calc(50% + 5vw);\n`\n\nconst HeaderIcon = styled.img`\n    margin-top: 2em;\n    max-width: 5em;\n    filter: grayscale(0.5);\n    cursor: pointer;\n\n    &:hover{\n        filter: grayscale(0);\n        transition: all 0.2s;\n    }\n`\nconst Item = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-family: \"Montserrat\", Arial;\n    margin: 0 1em;\n\n    a {\n        text-decoration: none;\n    }\n\n    img {\n        max-width: 7em;\n    }\n`","import React      from 'react'\nimport            './App.scss'\nimport Landing    from './Landing'\n\nconst App = () => {\n  return (\n    <div>\n      <Landing/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}